# This workflow will build a docker container, publish it to Google Container Registry, and deploy it to GKE when there is a push to the "main" branch.
#
# To configure this workflow:
#
# 1. Ensure that your repository contains the necessary configuration for your Google Kubernetes Engine cluster, including deployment.yml, kustomization.yml, service.yml, etc.
#
# 2. Create and configure a Workload Identity Provider for GitHub (https://github.com/google-github-actions/auth#setting-up-workload-identity-federation)
#
# 3. Change the values for the GAR_LOCATION, GKE_ZONE, GKE_CLUSTER, IMAGE, REPOSITORY and DEPLOYMENT_NAME environment variables (below).
#
# For more support on how to run the workflow, please visit https://github.com/google-github-actions/setup-gcloud/tree/master/example-workflows/gke-kustomize

name: Build and Deploy to GKE

on:
  push:
    branches: [ "main" ]

env:
  PROJECT_ID: my-first-gcp-instance-323404  # Project_id
  REGION: us-central1 # TODO: update region of the Artifact Registry
  GKE_CLUSTER_NAME: gke-test-1    # TODO: update to cluster name
  WIF: projects/1020057377922/locations/global/workloadIdentityPools/github-wif-pool/providers/githubwif  # Check README.md
  WIF_SA: test-wif@my-first-gcp-instance-323404.iam.gserviceaccount.com   # SA created for this 
  

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    #environment: production

    permissions:
      contents: 'read'
      id-token: 'write'
      deployments: 'write'
      statuses: 'write'

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    # Configure Workload Identity Federation and generate an access token.
    - id: 'auth'
      name: 'Authenticate to Google Cloud'
      uses: 'google-github-actions/auth@v1'
      with:
        project_id: ${{ env.PROJECT_ID }}
        workload_identity_provider: ${{ env.WIF}}
        token_format: 'access_token'
        service_account: ${{ env.WIF_SA }}
        access_token_lifetime: 300
    

    - name: Install Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
          project_id: ${{ env.PROJECT_ID }}
  
      # List Google Cloud projects
    - name: List Google Cloud Projects
      env:
          CLOUDSDK_AUTH_ACCESS_TOKEN: ${{ steps.auth.outputs.access_token }}
      run: |
          gcloud projects list

          gcloud iam service-accounts list

    - name: Login to Artifact Registry
      uses: docker/login-action@v2
      with:
        registry: us-central1-docker.pkg.dev
        username: oauth2accesstoken
        password: ${{ steps.auth.outputs.access_token }}

    - id: get-tag
      name: Genarate tag
      run: |
        RELEASE_TAG=$(date --utc +%Y-%m-%dT%H%M)
        echo "RELEASE_TAG=$RELEASE_TAG" >> $GITHUB_ENV
        echo "tag=$RELEASE_TAG" >> $GITHUB_OUTPUT

    - name: Build_Docker_image
      id: docker_build 
      run: |-
        IMAGE=us-central1-docker.pkg.dev/my-first-gcp-instance-323404/my-images/mynginx:${{ steps.get-tag.outputs.tag }}
        docker build -t $IMAGE .
        docker push $IMAGE
        echo "IMAGE_TAG=$IMAGE" >> $GITHUB_ENV
      # docker build -t us-central1-docker.pkg.dev/my-first-gcp-instance-323404/my-images/mynginx:${{ steps.get-tag.outputs.tag}} .
      # docker push us-central1-docker.pkg.dev/my-first-gcp-instance-323404/my-images/mynginx:${{ steps.get-tag.outputs.tag}}

    - name: Set up GKE credentials
      uses: google-github-actions/get-gke-credentials@v1
      with:
          cluster_name: ${{ env.GKE_CLUSTER_NAME }}
          location: ${{ env.REGION }}
          use_connect_gateway: true

    - name: Debug Kubeconfig
      run: |
        echo "Checking kubeconfig:"
        cat $KUBECONFIG
        kubectl config view
  
    - name: Check Cluster Access
      run: |
        echo "Getting nodes list:"
        kubectl get nodes --v=8      

    - name: Deploy to Kubernetes
      env:
          IMAGE_TAG: ${{ steps.docker_build.outputs.image }} # This uses the fully qualified image name from the docker step
      run: |-
            cd kubernetes
            pwd
            sed -i 's|LOCATION-docker.pkg.dev/PROJECT_ID/REPOSITORY/IMAGE|'"$IMAGE_TAG"'|' deploy.yml
            kubectl apply -f . --validate=false    
    